#include <iostream>
#include <vector>
#include <string>

using namespace std;

string digit_num = "73167176531330624919225119674426574742355349194934969835\
2031277450632623957831801698480186947885184385861560789112949495459501737958\
3319528532088055111254069874715852386305071569329096329522744304355766896648\
9504452445231617318564030987111217223831136222989342338030813533627661428280\
6444486645238749303589072962904915604407723907138105158593079608667017242712\
1883998797908792274921901699720888093776657273330010533678812202354218097512\
5454059475224352584907711670556013604839586446706324415722155397536978179778\
4617406495514929086256932197846862248283972241375657056057490261407972968652\
4145351004748216637048440319989000889524345065854122758866688116427171479924\
4429282308634656748139191231628245861786645835912456652947654568284891288314\
2607690042242190226710556263211111093705442175069416589604080719840385096245\
5444362981230987879927244284909188845801561660979191338754992005240636899125\
6071760605886116467109405077541002256983155200055935729725716362695618826704\
28252483600823257530420752963450";

vector<int> str2vect(string digit_num){
    vector<int> digit; 
    
     for (char c : digit_num) {
        int num = c - '0';  
        digit.push_back(num);
    } 
	return digit;
}

long long digit_13(vector<int> vect){
    long long product = 1, largest = 0; 
    
    for(int i = 0 ; i <= 999 - 12 ; i++){ 
        for(int j = i ; j < i + 13 ; j++){ 
        
            product = product * vect[j];
        }
        if(product > largest)
            largest = product;

        product = 1;
    } 
    return largest;
}

int main() {
    vector<int> digit_1000 = str2vect(digit_num);
    cout << digit_13(digit_1000);
    return 0;
}
